// 配置所有项目
subprojects {
    apply plugin: 'java-library'

    // 指定jdk版本
    sourceCompatibility = 11
    targetCompatibility = 11

    group = 'com.glacier'
    description = 'jdk11-learning'

    // 指定仓库
    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/spring' }
        maven { url 'https://maven.aliyun.com/repository/spring-plugin' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
        mavenCentral()
    }

    ext {
        // 测试
        junitVersion = "5.6.2"
    }

    dependencies {
        // compileOnly fileTree(dir: "$rootDir/dependencies/libs", include: ['*.jar'])

        // 配置junit 5 单元测试
        testImplementation("org.junit.jupiter:junit-jupiter:${junitVersion}")
    }

    tasks.withType(JavaCompile) {
        // 设置编码为UTF-8
        options.encoding = "UTF-8"
        doFirst {
            options.compilerArgs += [
                    '--module-path', classpath.asPath
            ]
        }
    }

    //配置 删除文件夹
    task cleanTempFiles {
        doLast {
            delete "out"
            delete "logs"
        }
    }
    clean.dependsOn cleanTempFiles

    // 配置 创建源文件夹
    task mkdirs {
        sourceSets*.java.srcDirs*.each {
            it.mkdirs()
        }
        sourceSets*.resources.srcDirs*.each {
            it.mkdirs()
        }
    }
    // 拷贝jar包
    task copyJars(type: Copy) {
        // 运行时
        from configurations.runtimeClasspath
        // 目标位置
        into "$buildDir/libs"
    }

    test {
        useJUnitPlatform {
            // includeEngines 'junit-jupiter'
            excludeEngines 'junit-vintage'
        }
    }
}